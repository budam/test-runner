name: 'Terraform'

runs-on: self-hosted

on: [push, pull_request, workflow_dispatch]

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    env:
      TF_VAR_azurerm_sp_id: ${{ secrets.SP_DD_CLIENT_ID }}
      TF_VAR_azurerm_sp_secret: ${{ secrets.SP_DD_CLIENT_SECRET }}
      TF_VAR_azurerm_tenant_name: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_azurerm_subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_datadog_api_key: ${{ secrets.DD_API_KEY }}
      TF_VAR_datadog_app_key: ${{ secrets.DD_APP_KEY }}
      ARM_CLIENT_ID: ${{ secrets.SP_AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.SP_AZURE_CLIENT_SECRET }}
    runs-on: ubuntu-latest

    #  Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.2.9

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Run a terraform plan for pull requests only
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
    
    # Add a comment to pull requests with plan results
    - name: Comment for Pull Request
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
